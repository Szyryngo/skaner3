47. Asystent: Zmiany do wprowadzenia w projekcie na podstawie wcześniejszych uzgodnień — docelowe pliki i zawartość (każdy plik oddzielny blok):

# core/system_info.py
```python
import psutil

def get_system_info():
    """Zwraca podstawowe informacje o systemie w formie słownika."""
    cpu = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory().percent
    threads = psutil.cpu_count()
    return {
        "CPU (%)": cpu,
        "RAM (%)": ram,
        "Wątki": threads
    }
```

# core/ai_engine.py
```python
def get_ai_status():
    """
    Zwraca status AI oraz kluczowe parametry.
    Przykład zwracanych danych można dostosować do realnej implementacji.
    """
    # Przykładowe dane – zamień na realne źródło statusu w swoim projekcie
    status = "Działa"
    aktualny_model = "Model_v1"
    ilosc_watkow = 4
    return {
        "Status AI": status,
        "Model": aktualny_model,
        "Wątki AI": ilosc_watkow
    }
```

# ui/ai_status_viewer.py
```python
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QGroupBox, QFormLayout
from core.system_info import get_system_info
from core.ai_engine import get_ai_status

class AiStatusViewer(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.layout = QVBoxLayout(self)
        self.system_group = QGroupBox("Status systemu")
        self.ai_group = QGroupBox("Status AI")

        self.system_layout = QFormLayout()
        self.ai_layout = QFormLayout()
        self.system_group.setLayout(self.system_layout)
        self.ai_group.setLayout(self.ai_layout)

        self.layout.addWidget(self.system_group)
        self.layout.addWidget(self.ai_group)

        self.refresh_status()

    def refresh_status(self):
        # Czyść stare widgety
        while self.system_layout.count():
            self.system_layout.removeRow(0)
        while self.ai_layout.count():
            self.ai_layout.removeRow(0)
        # Dodaj aktualne dane
        for k, v in get_system_info().items():
            self.system_layout.addRow(QLabel(str(k)), QLabel(str(v)))
        for k, v in get_ai_status().items():
            self.ai_layout.addRow(QLabel(str(k)), QLabel(str(v)))
```

# ui/main_window.py (fragmenty do integracji)
```python
# ... reszta importów ...
from PyQt5.QtWidgets import QTabWidget
from PyQt5.QtCore import QTimer
from ui.ai_status_viewer import AiStatusViewer

# ... kod klasy MainWindow ...
class MainWindow(QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # ... dotychczasowy kod ...
        self.tabs = QTabWidget()
        # ... inne zakładki ...
        self.ai_status_viewer = AiStatusViewer()
        self.tabs.addTab(self.ai_status_viewer, "Status systemu i AI")
        self.setCentralWidget(self.tabs)

        # Timer do odświeżania danych co 2 sekundy
        self.status_timer = QTimer(self)
        self.status_timer.timeout.connect(self.ai_status_viewer.refresh_status)
        self.status_timer.start(2000)
```